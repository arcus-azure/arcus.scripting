name: $(Package.Version)

trigger: none
pr: none

parameters:
  - name: 'Package.Version'
    type: 'string'
  - name: 'Prerelease'
    displayName: 'Prerelease string (ex. -alpha, -alpha1, -BETA, -update20171020) or none'
    type: 'string'
    default: 'none'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Build Configuration'
  - group: 'Arcus Scripting - Integration Testing'
  - group: 'Arcus.Scripting - Releasing PS Gallery'
  - template: ./variables/build.yml
  - name: 'Repository'
    value: 'arcus-azure/arcus.scripting'
  - name: 'Package.Version'
    value: "${{ parameters['Package.Version'] }}${{ parameters['Prerelease'] }}"
  - name: 'Prerelease'
    value: ${{ parameters['Prerelease'] }}

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace package version tokens'
            inputs:
              rootDirectory: 'src/'
              targetFiles: '**/*.psd1'
              encoding: 'auto'
              verbosity: 'detailed'
              writeBOM: true
              actionOnMissing: 'fail'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
          - powershell: |
              if ('$(Prerelease)' -ne 'none') {
                Get-ChildItem -Path ./src -Filter *.psd1 -Recurse |
                  % { Write-Host "Insert prerelease '$(Prerelease)' into PowerShell $($_.Name) datafile"
                      $contents = Get-Content $_.FullName
                      $contents = $contents -replace "# Prerelease = ''", "Prerelease = '$(Prerelease)'"
                      $contents | Out-File $_.FullName -Force }
              }
            displayName: 'Set prerelease version'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: |
                **/*.psm1
                **/*.psd1
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunUnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: 'templates/run-pester-tests.yml'
            parameters:
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: 'templates/run-pester-tests.yml'
            parameters:
              projectName: '$(Project).Tests.Integration'

  - stage: Release
    displayName: 'Release to PowerShell Gallery'
    dependsOn: 
      - UnitTests
      - IntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToNuGet
        displayName: 'Push to PowerShell Gallery'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: github/create-release.yml@templates
            parameters:
              repositoryName: '$(Repository)'
              releaseNotes: |
                Install new version via [PowerShell Gallery](https://www.powershellgallery.com/packages?q=$(Project).ARM)
                ```shell
                PS > Install-Module -Name $(Project).ARM --Version $(Build.BuildNumber)
                ```
          - powershell: |
              Import-Module PowerShellGet -Force
              Get-ChildItem -Path ./src -Filter *.psd1 -Recurse |
                % { & $env:SCRIPT_PATH -ManifestPath $_.FullName -DestinationFolder $_.DirectoryName }
            displayName: 'Generate .nuspec file for each PowerShell module'
            env:
              SCRIPT_PATH: '$(Build.SourcesDirectory)\build\tools\psd1-to-nuspec.ps1'
          - task: NuGetCommand@2
            inputs:
              command: 'pack'
              packagesToPack: '**/*.nuspec'
              packDestination: '$(Build.ArtifactStagingDirectory)'
          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet'
          - powershell: |
              Get-ChildItem -Path $env:ARTIFACT_DIR -Filter *.nupkg -Recurse |
                % { & "nuget" push $_.FullName -Source $(Source) -ApiKey $(NuGet.ApiKey) -SkipDuplicate }
            displayName: 'Push to PowerShell Gallery'
            env:
              ARTIFACT_DIR: '$(Build.ArtifactStagingDirectory)'