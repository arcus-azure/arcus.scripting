name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*

pr:
  paths:
    include:
    - src/*
    - build/ci-build.yml

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  - template: ./variables/build.yml
    # 'Package.Version.ManualTrigger' is added as queue-time variable on build in Azure DevOps

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: 'nuget/determine-pr-version.yml@templates'
            parameters:
              manualTriggerVersion: $(Package.Version.ManualTrigger)
              packageVersionVariableName: 'Package.Version'
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace package version tokens'
            inputs:
              rootDirectory: 'src/'
              targetFiles: '**/*.psd1'
              encoding: 'auto'
              verbosity: 'detailed'
              writeBOM: true
              actionOnMissing: 'fail'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: |
                **/*.psm1
                **/*.psd1
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: 'templates/run-pester-tests.yml'
            parameters:
              projectName: '$(Project).Tests.Unit'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn: UnitTests
    condition: false
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: nuget/publish-preview-package.yml@templates
            parameters:
              packagesToPush: 'src/**/*.psm1'
          - task: PowerShell@2
            displayName: 'Publish PS module to MyGet'
            inputs:
              targetType: 'inline'
              pwsh: true
              inline: |
                Import-Module PowerShellGet
                $PSGalleryPublishUri = 'https://www.myget.org/F/arcus/api/v2/package'
                $PSGallerySourceUri = 'https://www.myget.org/F/arcus/api/v2'
                $APIKey = '<api-key-for-MyGet-goes-here>'
                
                Register-PSRepository -Name MyGetFeed -SourceLocation $PSGallerySourceUri -PublishLocation $PSGalleryPublishUri
                Publish-Module -Path <path-to-module> -NuGetApiKey $APIKey -Repository MyGetFeed -Verbose
                Register-PSRepository -Name MyGetFeed -SourceLocation $PSGallerySourceUri -PublishLocation $PSGalleryPublishUri
                Publish-Module -Path <path-to-module> -NuGetApiKey $APIKey -Repository MyGetFeed -Verbose
