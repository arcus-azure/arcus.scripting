name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/*

pr:
  paths:
    include:
      - src/*
      - build/ci-build.yml

parameters:
  - name: 'Package.Version.ManualTrigger'
    type: string
    default: 'preview'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus - GitHub Package Registry'
  - group: 'MyGet'
  - group: 'Build Configuration'
  - template: ./variables/build.yml
  - name: 'Package.Version'
    value: '0.$(Build.BuildNumber)'

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: 'Replace package version tokens'
            inputs:
              rootDirectory: 'src/'
              targetFiles: '**/*.psd1'
              encoding: 'auto'
              verbosity: 'detailed'
              writeBOM: true
              actionOnMissing: 'fail'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: |
                **/*.psm1
                **/*.psd1
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunUnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: 'templates/run-pester-tests.yml'
            parameters:
              projectName: '$(Project).Tests.Unit'

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: RunIntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: 'templates/run-pester-tests.yml'
            parameters:
              projectName: '$(Project).Tests.Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn: 
      - UnitTests
      - IntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - powershell: |
              Get-ChildItem -Path ./src -Filter *.psd1 -Recurse |
                % { 
                  $content = Get-Content $_.FullName
                  $content -replace "^RequiredModules", "#RequiredModules" | Out-File $_.FullName
                  try {
                    Write-Host "Validate PowerShell module '$($_.FullName)'"
                    Test-ModuleManifest -Path $_.FullName
                  } finally {
                    $content = Get-Content $_.FullName
                    $content -replace "^#RequiredModules = @\(@", "RequiredModules = @(@" | Out-File $_.FullName
                  } 
                }
            displayName: 'Validate PS module'
          - powershell: |
              Import-Module PowerShellGet -Force
              Get-ChildItem -Path ./src -Filter *.psd1 -Recurse |
                % { & $env:SCRIPT_PATH -ManifestPath $_.FullName -DestinationFolder $_.DirectoryName }
            displayName: 'Generate .nuspec file for each PowerShell module'
            env:
              SCRIPT_PATH: '$(Build.SourcesDirectory)\build\tools\psd1-to-nuspec.ps1'
          - task: NuGetCommand@2
            inputs:
              command: 'pack'
              packagesToPack: '**/*.nuspec'
              packDestination: '$(Build.ArtifactStagingDirectory)'
          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet'
          - powershell: |
              $PSGalleryPublishUri = 'https://www.myget.org/F/arcus/api/v2/package'
              Get-ChildItem -Path $env:ARTIFACT_DIR -Filter *.nupkg -Recurse |
                  % { & "nuget" push $_.FullName -Source $PSGalleryPublishUri -ApiKey $env:APIKEY }
            displayName: 'Push to MyGet'
            env:
              ARTIFACT_DIR: '$(Build.ArtifactStagingDirectory)'
              APIKEY: $(MyGet.ApiKey)
