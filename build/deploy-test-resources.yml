name: Arcus Scripting - Deploy test resources

trigger: none
pr: none

parameters:
  - name: azureServiceConnection
    displayName: 'Azure service connection'
    type: string
    default: 'Azure Codit-Arcus Service Principal'
  - name: resourceGroupName
    displayName: 'Resource group name'
    default: arcus-scripting-dev-we-rg

variables:
  - template: ./variables/build.yml
  - template: ./variables/test.yml

stages:
  - stage: Deploy
    jobs:
      - job: DeployBicep
        displayName: 'Deploy test resources'
        pool:
          vmImage: '$(Vm.Linux.Image)'
        steps:
          - task: AzureCLI@2
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            inputs:
              azureSubscription: '${{ parameters.azureServiceConnection }}'
              addSpnToEnvironment: true
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az deployment sub create `
                  --location westeurope `
                  --template-file ./build/templates/deploy-resource-group.bicep `
                  --parameters resourceGroupName=$env:ARCUS_SCRIPTING_RESOURCEGROUP_NAME `
                  --parameters location=westeurope 

                $objectId = (az ad sp show --id $env:servicePrincipalId | ConvertFrom-Json).id

                $symbols = '!@#$%^&*=(),.?'.ToCharArray()
                $characterList = 'a'..'z' + 'A'..'Z' + '0'..'9' + $symbols
                function Gen-Password {
                    param($length)
                    do {
                        $password = ""
                        for ($i = 0; $i -lt $length; $i++) {
                            $randomIndex = [System.Security.Cryptography.RandomNumberGenerator]::GetInt32(0, $characterList.Length)
                            $password += $characterList[$randomIndex]
                        }

                        $hasLowerChar = $password -cmatch '[a-z]'
                        $hasUpperChar = $password -cmatch '[A-Z]'
                        $hasDigit = $password -match '[0-9]'
                        $hasSymbol = $password.IndexOfAny($symbols) -ne -1
                    }
                    until (($hasLowerChar + $hasUpperChar + $hasDigit + $hasSymbol) -ge 3)
                    $password
                }

                $sqlAdminPassword = Gen-Password 14
                az deployment group create `
                  --resource-group $env:ARCUS_SCRIPTING_RESOURCEGROUP_NAME `
                  --template-file ./build/templates/deploy-test-resources.bicep `
                  --parameters location=westeurope `
                  --parameters keyVaultName=$env:ARCUS_SCRIPTING_KEYVAULT_NAME `
                  --parameters storageAccountName=$env:ARCUS_SCRIPTING_STORAGEACCOUNT_NAME `
                  --parameters appServiceName=$env:ARCUS_SCRIPTING_APPSERVICE_NAME `
                  --parameters sqlServerName=$env:ARCUS_SCRIPTING_SQL_SERVERNAME `
                  --parameters sqlDatabaseName=$env:ARCUS_SCRIPTING_SQL_DATABASENAME `
                  --parameters sqlAdminUserName=$env:ARCUS_SCRIPTING_SQL_USERNAME `
                  --parameters sqlAdminPassword=$sqlAdminPassword `
                  --parameters sqlAdminPassword_secretName=$env:ARCUS_SCRIPTING_SQL_PASSWORD_SECRETNAME `
                  --parameters integrationAccountName=$env:ARCUS_SCRIPTING_INTEGRATIONACCOUNT_NAME `
                  --parameters servicePrincipal_objectId=$objectId
