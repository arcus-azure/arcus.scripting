parameters:
  projectName: ''

steps:
  - bash: |
      if [ -z "$PROJECT_NAME" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"projectName\""
        echo "##vso[task.complete result=Failed;]"
      fi
    env:
      PROJECT_NAME: ${{ parameters.projectName }}
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace integration test tokens'
    inputs:
      rootDirectory: 'src/${{ parameters.projectName }}/'
      targetFiles: 'appsettings.json'
      encoding: 'auto'
      verbosity: 'detailed'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
  - task: PowerShell@2
    displayName: 'Run Pester tests'
    inputs:
      targetType: 'inline'
      pwsh: true
      failOnStderr: true
      script: |
        Install-Module -Name Pester -Force -SkipPublisherCheck

        Get-ChildItem ./src -Filter *.psd1 -Recurse |
            % { $content = Import-PowerShellDataFile $_.FullName
                $content.RequiredModules |
                    where { $_.ModuleName -ne $null -and $_.ModuleVersion -ne "#{Package.Version}#"} |
                    % { Install-Module $_.ModuleName -MaximumVersion $_.ModuleVersion -Force -SkipPublisherCheck } }

        Import-Module ./src/Arcus.Scripting.Security
        
        Get-ChildItem -Path ./src -Filter *.psm1 -Recurse -Exclude "*Arcus.Scripting.Security*", "*.All.psm1" |
            % { Import-Module -Name $_.DirectoryName -ErrorAction Stop }
        
        Invoke-Pester -Script "./src/${{ parameters.projectName }}/" -OutputFile "./pester.test.results.xml" -OutputFormat 'NUnitXML' -EnableExit
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/pester.test.results*.xml'
      failTaskOnFailedTests: true
