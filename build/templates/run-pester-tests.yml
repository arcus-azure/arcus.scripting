parameters:
  azureServiceConnection: ''
  projectName: ''
  testName: ''

steps:
  - bash: |
      if [ -z "$PROJECT_NAME" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"projectName\""
        echo "##vso[task.complete result=Failed;]"
      fi
    env:
      PROJECT_NAME: ${{ parameters.projectName }}
    displayName: 'Guard against invalid parameters'

  - task: AzureCLI@2
    displayName: 'Import secrets from Azure Key Vault'
    condition: contains('${{ parameters.projectName }}', 'Integration')
    inputs:
      azureSubscription: '${{ parameters.azureServiceConnection }}'
      addSpnToEnvironment: true
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
        Install-Module -Name Arcus.Scripting.DevOps -AllowClobber -MinimumVersion 1.3.0

        $subscriptionId = (az account show | ConvertFrom-Json).id
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.SubscriptionId' -Value $subscriptionId -AsSecret
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.TenantId' -Value $env:tenantId -AsSecret
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.ServicePrincipal.ClientId' -Value $env:servicePrincipalId -AsSecret
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.ServicePrincipal.ClientSecret' -Value $env:servicePrincipalKey -AsSecret

        $sqlAdminPasswordSecret = az keyvault secret show --name $env:ARCUS_SCRIPTING_SQL_PASSWORD_SECRETNAME --vault-name $env:ARCUS_SCRIPTING_KEYVAULT_NAME | ConvertFrom-Json
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.Sql.Password' -Value $sqlAdminPasswordSecret.value -AsSecret

        $mainAppClientIdSecret = az keyvault secret show --name $env:ARCUS_GENERAL_ACTIVEDIRECTORY_MAINAPP_CLIENTID_SECRETNAME --vault-name $env:ARCUS_GENERAL_KEYVAULT_NAME | ConvertFrom-Json
        $clientAppClientIdSecret = az keyvault secret show --name $env:ARCUS_GENERAL_ACTIVEDIRECTORY_CLIENTAPP_CLIENTID_SECRETNAME --vault-name $env:ARCUS_GENERAL_KEYVAULT_NAME | ConvertFrom-Json
        Set-AzDevOpsVariable -Name 'Arcus.ActiveDirectory.MainApp.ClientId' -Value $mainAppClientIdSecret.value -AsSecret
        Set-AzDevOpsVariable -Name 'Arcus.ActiveDirectory.ClientApp.ClientId' -Value $clientAppClientIdSecret.value -AsSecret

        $activeDirectoryTenantIdSecret = az keyvault secret show --name $env:ARCUS_GENERAL_ACTIVEDIRECTORY_TENANTID_SECRETNAME --vault-name $env:ARCUS_GENERAL_KEYVAULT_NAME | ConvertFrom-Json
        $activeDirectoryServicePrincipalClientIdSecret = az keyvault secret show --name $env:ARCUS_GENERAL_ACTIVEDIRECTORY_SERVICEPRINCIPAL_CLIENTID_SECRETNAME --vault-name $env:ARCUS_GENERAL_KEYVAULT_NAME | ConvertFrom-Json
        $activeDirectoryServicePrincipalClientSecretSecret = az keyvault secret show --name $env:ARCUS_GENERAL_ACTIVEDIRECTORY_SERVICEPRINCIPAL_CLIENTSECRET_SECRETNAME --vault-name $env:ARCUS_GENERAL_KEYVAULT_NAME | ConvertFrom-Json
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.ActiveDirectory.TenantId' -Value $activeDirectoryTenantIdSecret.value
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.ActiveDirectory.ServicePrincipal.ClientId' -Value $activeDirectoryServicePrincipalClientIdSecret.value -AsSecret
        Set-AzDevOpsVariable -Name 'Arcus.Scripting.ActiveDirectory.ServicePrincipal.ClientSecret' -Value $activeDirectoryServicePrincipalClientSecretSecret.value -AsSecret

  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace integration test tokens'
    condition: contains('${{ parameters.projectName }}', 'Integration')
    inputs:
      rootDirectory: 'src/${{ parameters.projectName }}/'
      targetFiles: 'appsettings.json'
      encoding: 'auto'
      verbosity: 'detailed'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - powershell: |
      Write-Host "Installing Pester test framework and Az required modules"
      Install-Module -Name Pester -Force -SkipPublisherCheck -MaximumVersion 5.1.1
      Get-ChildItem ./src -Filter *.psd1 -Recurse -Exclude "*.All.psd1" |
          % { Write-Host "Inspect PowerShell '$($_.Name)' datafile"
              $content = Import-PowerShellDataFile $_.FullName
              $content.RequiredModules |
                  where { $_.ModuleName -ne $null -and $_.ModuleName -notlike 'Arcus.Scripting.*' -and $_.ModuleVersion -ne "#{Package.Version}#" } |
                  % { Write-Host "Install $($_.ModuleName) module $($_.ModuleVersion)"
                      Install-Module $_.ModuleName -MaximumVersion $_.ModuleVersion -AllowClobber -Force -SkipPublisherCheck } }
      Install-Module -Name Az -Force -AllowClobber -SkipPublisherCheck -MaximumVersion 9.1.1
      Install-Module -Name AzTable -Force -SkipPublisherCheck -MaximumVersion 2.1.0
      Install-Module -Name Microsoft.Graph.Applications -Force -SkipPublisherCheck -MaximumVersion 1.15.0
      Write-Host "Done installing, start importing modules"
    displayName: 'Install Pester test framework and Az required modules'

  - pwsh: |
      Import-Module ./src/Arcus.Scripting.Security
      Get-ChildItem -Path ./src -Filter *.psm1 -Recurse -Exclude "*Arcus.Scripting.Security*", "*.All.psm1" |
        % { Write-Host "Import $($_.DirectoryName) module"
            Import-Module -Name $_.DirectoryName -ErrorAction Stop }
      Invoke-Pester -Script "./src/${{ parameters.projectName }}/${{ parameters.testName }}.tests.ps1" -OutputFile "./pester.test.results.${{ parameters.testName }}.xml" -OutputFormat 'NUnitXML' -EnableExit
    displayName: 'Run Pester tests'
    failOnStderr: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: always()
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/pester.test.results*.xml'
      failTaskOnFailedTests: true
