parameters:
  projectName: ''

steps:
  - bash: |
      if [ -z "$PROJECT_NAME" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"projectName\""
        echo "##vso[task.complete result=Failed;]"
      fi
    env:
      PROJECT_NAME: ${{ parameters.projectName }}
    displayName: 'Guard against invalid parameters'
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace integration test tokens'
    inputs:
      rootDirectory: 'src/${{ parameters.projectName }}/'
      targetFiles: 'appsettings.json'
      encoding: 'auto'
      verbosity: 'detailed'
      writeBOM: true
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
  - powershell: |
      Write-Host "Installing Pester test framework and Az required modules"
      Install-Module -Name Pester -Force -SkipPublisherCheck -MaximumVersion 5.1.1
      Get-ChildItem ./src -Filter *.psd1 -Recurse -Exclude "*.All.psd1" |
          % { Write-Host "Inspect PowerShell '$($_.Name)' datafile"
              $content = Import-PowerShellDataFile $_.FullName
              $content.RequiredModules |
                  where { $_.ModuleName -ne $null -and $_.ModuleName -notlike 'Arcus.Scripting.*' -and $_.ModuleVersion -ne "#{Package.Version}#" } |
                  % { Write-Host "Install $($_.ModuleName) module $($_.ModuleVersion)"
                      Install-Module $_.ModuleName -MaximumVersion $_.ModuleVersion -AllowClobber -Force -SkipPublisherCheck } }
      Install-Module -Name Az -Force -AllowClobber -SkipPublisherCheck -MaximumVersion 5.6.0
      Install-Module -Name AzTable -Force -SkipPublisherCheck -MaximumVersion 2.1.0
      Write-Host "Done installing, start importing modules"
    displayName: 'Install Pester test framework and Az required modules'
  - powershell: |
      Import-Module ./src/Arcus.Scripting.Security
      Get-ChildItem -Path ./src -Filter *.psm1 -Recurse -Exclude "*Arcus.Scripting.Security*", "*.All.psm1" |
        % { Write-Host "Import $($_.DirectoryName) module"
            Import-Module -Name $_.DirectoryName -ErrorAction Stop }
      Invoke-Pester -Script "./src/${{ parameters.projectName }}/" -OutputFile "./pester.test.results.xml" -OutputFormat 'NUnitXML' -EnableExit
    displayName: 'Run Pester tests'
    failOnStderr: true
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  - task: PublishTestResults@2
    displayName: 'Publish test results'
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: '**/pester.test.results*.xml'
      failTaskOnFailedTests: true
